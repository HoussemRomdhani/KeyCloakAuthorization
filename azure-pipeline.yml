trigger:
  - main

pool:
  name: 'dast'

variables:
  buildConfiguration: 'Release'
  sonarProjectKey: 'web-app'
  sonarQubeServiceConnection: 'sonar'
  sonarHostUrl: 'http://host.docker.internal:9000'
  sonarToken: "squ_a3f61021fec0628f903da3f2e93b0b6d85ac837a"
  imageName: 'web-app'
  tag: 'latest'
  webAppUrl: 'http://host.docker.internal:5033'
  AZP_AGENT_CLEANUP_PSMODULES_IN_POWERSHELL: "true"
  connectionString: 'Server=host.docker.internal,1435;Database=Bookstore;User Id=sa;Password=Passw0rd123!;TrustServerCertificate=True;'

stages:
- stage: BuildAndAnalyze
  displayName: "Build & SonarQube Analysis"
  jobs:
  - job: BuildAndScan
    displayName: "Build and Run SonarQube Scan"
    steps:

    # Install .NET SDK
    - task: UseDotNet@2
      displayName: "Install .NET SDK"
      inputs:
        packageType: "sdk"
        version: "9.x"

    # Step 1: Prepare SonarQube Analysis
    - task: SonarQubePrepare@7
      displayName: "Prepare SonarQube Analysis"
      inputs:
        SonarQube: "$(sonarQubeServiceConnection)" 
        scannerMode: "dotnet"
        projectKey: "$(sonarProjectKey)"
        extraProperties: |
          sonar.host.url=$(sonarHostUrl)
          sonar.exclusions=**/bin/**,**/obj/**

    # Step 2: Restore and Build Console App
    - script: |
        dotnet restore
        dotnet build --configuration $(buildConfiguration)
      displayName: "Restore and Build"
    
    - powershell: |
        $params = "$env:SONARQUBE_SCANNER_PARAMS" -replace '"sonar.branch.name":"[\w,/,-]*"\,?'
        Write-Host "##vso[task.setvariable variable=SONARQUBE_SCANNER_PARAMS]$params"

    # Step 3: Run SonarQube Analysis
    - task: SonarQubeAnalyze@7
      displayName: "Run SonarQube Analysis"

    # Publish Quality Gate Result task
    - task: SonarQubePublish@7
      inputs:
        pollingTimeoutSec: '300'

    # Step to enforce Quality Gate check
    # - task: PowerShell@2
    #   displayName: "Check SonarQube Quality Gate Status"
    #   inputs:
    #      targetType: 'inline'
    #      script: |
    #         $sonarUrl = "$(sonarHostUrl)/api/qualitygates/project_status?projectKey=$(sonarProjectKey)"
    #         $status = Invoke-RestMethod -Uri $sonarUrl -Headers @{Authorization=("Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes("$(sonarToken):")))} | Select-Object -ExpandProperty projectStatus | Select-Object -ExpandProperty status

    #         Write-Host "SonarQube Quality Gate Status: $status"
      
    #         if ($status -eq "ERROR") {
    #           Write-Host "❌ Quality Gate failed! Stopping pipeline."
    #           # exit 1
    #         } else {
    #           Write-Host "✅ Quality Gate passed."
    #         }

- stage: Deploy
  displayName: 'Build and Run Docker Container'
  dependsOn: BuildAndAnalyze
  jobs:
  - job: Build
    displayName: 'Build and Run'
    steps:
    - script: |
        echo "Building Docker image..."
        docker build -t $(imageName):$(tag) -f WebApp/Dockerfile WebApp/
      displayName: 'Build Docker Image'

    - task: PowerShell@2
      displayName: 'Remove Existing Container'
      inputs:
         targetType: 'inline'
         script: |
            echo "Stopping and removing existing container..."
            $container = docker ps -q --filter "name=$(imageName)"
            if (-not [string]::IsNullOrEmpty($container)) {
                Write-Host "Stopping and removing container..."
                docker stop $(imageName)
                docker rm $(imageName)
            } else {
                Write-Host "No container to stop."
            }
      

    - script: |
        echo "Running Docker container..."
        docker run -d -p 5033:8080 -e ConnectionStrings__DefaultConnection="$(connectionString)"  ASPNETCORE_ENVIRONMENT=Production   --name $(imageName) $(imageName):$(tag)
      displayName: 'Run Docker Container'

    - script: |
        echo "Listing running containers..."
        docker ps
      displayName: 'Verify Running Container'

- stage: DAST_Scan
  displayName: "Dynamic Security Testing with OWASP ZAP"
  dependsOn: Deploy
  jobs:
      - job: DAST_Scan
        displayName: "Run OWASP ZAP Scan"
        steps:
          - task: PowerShell@2
            displayName: "Run OWASP ZAP Scan"
            inputs:
              targetType: 'inline'
              script: |
                 Write-Host "Starting OWASP ZAP Scan on $(webAppUrl)..."
                 docker  run  --mount  type=bind,source="/C/tmp/zap",target=/zap/wrk zaproxy/zap-stable zap-baseline.py  -I -t $(webAppUrl) -r  zap_report.html -J zap_report.json -w zap_report.md 
                 Write-Host "OWASP ZAP scan completed."
                 Write-Host " Build.SourcesDirectory est: $(Build.SourcesDirectory)"
                 Write-Host " Pipeline.Workspace est: $(Pipeline.Workspace)"
            
          - task: PublishBuildArtifacts@1
            displayName: "Publish OWASP ZAP Report"
            inputs:
              pathToPublish: 'C:/tmp/zap/zap_report.html'
              artifactName: 'OWASP_ZAP_Report'

          - task: PowerShell@2
            displayName: "Check OWASP ZAP Results"
            inputs:
              targetType: 'inline'
              script: | 
                  $reportFileContent = get-content C:/tmp/zap/zap_report.md
                  $high_score= $reportFileContent | select-string -pattern "^\|\sHigh" | %{$_.Line.Split("\|")[2]}
                  Write-Host "******* (DAST Analysis) HIGH score= $high_score"
  
                  if ($high_score.trim() -ne "0") {
                      Write-Host "(DAST Analysis) High Security vulnerabilities found!  HIGH score= $high_score"
                      exit 1
                  } 
                  $medium_score= $reportFileContent | select-string -pattern "^\|\sMedium" | %{$_.Line.Split("\|")[2]}
                  Write-Host "******* (DAST Analysis) Medium score= $medium_score"
                  if ("$medium_score".trim() -ne "0") {
                      Write-Host "(DAST Analysis) Medium Security vulnerabilities found!  MEDIUM score= $medium_score"
                      exit 1
                  } 
                  Write-Host "(DAST Analysis) No critical vulnerabilities found."

